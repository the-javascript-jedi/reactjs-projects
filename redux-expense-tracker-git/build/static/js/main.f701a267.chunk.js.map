{"version":3,"sources":["actions/Expenses.js","Components/ExpenseListItem.js","selectors/Expenses.js","Components/ExpenseList.js","Components/ExpenseListFilters.js","actions/Filters.js","Components/ExpenseDashboardPage.js","Components/ExpenseForm.js","Components/AddExpensePage.js","Components/EditExpensePage.js","Components/HelpPage.js","Components/NotFoundPage.js","Components/Header.js","routers/AppRouter.js","reducers/Expenses.js","reducers/Filters.js","App.js","store/ConfigureStore.js","index.js"],"names":["addExpense","description","note","amount","createdAt","type","expense","id","uuid","connect","state","console","log","expenses","dispatch","to","onClick","removeExpense","getVisibleExpenses","text","sortBy","startDate","endDate","filter","createdAtMoment","moment","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","toLowerCase","includes","sort","a","b","filters","props","map","key","useState","startOf","valueOf","selectedStartDate","setSelectedStartDate","endOf","selectedEndDate","setSelectedEndDate","value","onChange","e","target","setTextFilter","placeholderText","selected","date","undefined","setStartDate","sortSelectedStartDate","dateFormat","isClearable","showYearDropdown","scrollableMonthYearDropdown","setEndDate","sortSelectedEndDate","ExpenseDashboardPage","ExpenseForm","singleExpense","setDescription","setNote","setAmount","errorMsg","setErrorMsg","Date","now","selectedDate","setSelectedDate","onSubmit","preventDefault","parseFloat","placeholder","autoFocus","match","history","push","find","params","updates","HelpPage","NotFoundPage","Header","activeClassName","exact","AppRouter","routes","path","component","AddExpensePage","EditExpensePage","expenseReducerDefaultState","expensesReducer","action","filtersReducerDefaultState","filtersReducer","store","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","getState","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f701a267.chunk.js","sourcesContent":["// storing action generators for expenses\r\nimport { v1 as uuid } from \"uuid\";\r\n// ADD_EXPENSE\r\nexport const addExpense = ({\r\n  description = \"\",\r\n  note = \"\",\r\n  amount = 0,\r\n  createdAt = 0,\r\n} = {}) => ({\r\n  type: \"ADD_EXPENSE\",\r\n  expense: {\r\n    id: uuid(),\r\n    description,\r\n    note,\r\n    amount,\r\n    createdAt,\r\n  },\r\n});\r\n// REMOVE_EXPENSE\r\nexport const removeExpense = ({ id } = {}) => ({\r\n  type: \"REMOVE_EXPENSE\",\r\n  id,\r\n});\r\n// REMOVE_EXPENSE - NOT DESTRUCTURED\r\n// const removeExpense = (expense = {}) => ({\r\n//   type: \"REMOVE_EXPENSE\",\r\n//   id:expense.id\r\n// });\r\n// EDIT_EXPENSE\r\nexport const editExpense = (id, updates) => ({\r\n  type: \"EDIT_EXPENSE\",\r\n  id,\r\n  updates,\r\n});","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeExpense } from \"../actions/Expenses\";\r\nimport { Link } from \"react-router-dom\";\r\nconst ExpenseListItem = ({ dispatch, id, description, amount, createdAt }) => {\r\n  return (\r\n    <div>\r\n      <Link to={`/edit/${id}`}>\r\n        <h3> {description}</h3>\r\n      </Link>\r\n      <p>\r\n        {amount}-{createdAt}\r\n      </p>\r\n      <button\r\n        onClick={() => {\r\n          // console.log(props.id)\r\n          dispatch(removeExpense({ id }));\r\n        }}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  return {\r\n    expenses: state.expenses,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ExpenseListItem);","import moment from 'moment';\r\n// Get Visible Expenses\r\nconst getVisibleExpenses = (expenses, { text, sortBy, startDate, endDate }) => {\r\n  return expenses\r\n    .filter((expense) => {\r\n      console.log(\"startDate\",startDate)\r\n      const createdAtMoment=moment(expense.createdAt);\r\n      const startDateMatch = startDate?moment(startDate).isSameOrBefore(createdAtMoment,'day'):true;\r\n      const endDateMatch = endDate?moment(endDate).isSameOrAfter(createdAtMoment,'day'):true;\r\n      const textMatch = expense.description\r\n        .toLowerCase()\r\n        .includes(text.toLowerCase());\r\n      // figure out if expenses.description as the text variable string inside it\r\n      // if all below values are true then the item will be kept in the array\r\n      return startDateMatch && endDateMatch && textMatch;\r\n    })\r\n    .sort((a, b) => {\r\n      console.log(\"sortBy\", sortBy);\r\n      if (sortBy === \"date\") {\r\n        return a.createdAt < b.createdAt ? 1 : -1;\r\n      } else if (sortBy === \"amount\") {\r\n        return a.amount < b.amount ? 1 : -1;\r\n      }\r\n      // else{\r\n      //   return false\r\n      // }\r\n    });\r\n};\r\nexport default getVisibleExpenses;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ExpenseListItem from \"./ExpenseListItem\";\r\nimport getVisibleExpenses from \"../selectors/Expenses\";\r\nconst ExpenseList = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>Expense List</h1>\r\n      {props.expenses.map((expense) => {\r\n        // we are spreading out all the properties on expense\r\n        return <ExpenseListItem key={expense.id} {...expense} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  // console.log(\"state\", state);\r\n  return {\r\n    expenses: getVisibleExpenses(state.expenses, state.filters),\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ExpenseList);","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setTextFilter,\r\n  sortByDate,\r\n  sortByAmount,\r\n  setStartDate,\r\n  setEndDate,\r\n} from \"../actions/Filters\";\r\nimport Datepicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ExpenseListFilters = (props) => {\r\n  console.log(\"props\", props);\r\n  // if no date is selected set the start date as start of month using moment\r\n  const [selectedStartDate, setSelectedStartDate] = useState(\r\n    moment().startOf(\"month\").valueOf()\r\n  );\r\n  // if no date is selected set the end date as end of month using moment\r\n  const [selectedEndDate, setSelectedEndDate] = useState(\r\n    moment().endOf(\"month\").valueOf()\r\n  );\r\n\r\n  const sortSelectedStartDate = (date) => {\r\n    console.log(\"sortSelectedStartDate\", date);\r\n    setSelectedStartDate(date);\r\n    props.dispatch(setStartDate(date));\r\n    //  props.dispatch(setStartDate(1596240000));\r\n  };\r\n  const sortSelectedEndDate = (date) => {\r\n    console.log(\"sortSelectedEndDate\", date);\r\n    setSelectedEndDate(date);\r\n    props.dispatch(setEndDate(date));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={props.filters.text}\r\n        onChange={(e) => {\r\n          console.log(e.target.value);\r\n          props.dispatch(setTextFilter(e.target.value));\r\n        }}\r\n      />\r\n      <select\r\n        value={props.filters.sortBy}\r\n        onChange={(e) => {\r\n          console.log(e.target.value);\r\n          if (e.target.value === \"date\") {\r\n            props.dispatch(sortByDate());\r\n          } else if (e.target.value === \"amount\") {\r\n            props.dispatch(sortByAmount());\r\n          }\r\n          //   props.dispatch(setTextFilter(e.target.value));\r\n        }}\r\n      >\r\n        <option value=\"date\">Date</option>\r\n        <option value=\"amount\">Amount</option>\r\n      </select>\r\n      <br />\r\n      <b>Search by Start Date or End Date</b>\r\n      {/* Start Date */}\r\n      <label>Start Date</label>\r\n      {/* onchange we get the date as a parameter and we set the date to state */}\r\n      <Datepicker\r\n        placeholderText=\"start date\"\r\n        selected={selectedStartDate}\r\n        onChange={(date) => {\r\n          sortSelectedStartDate(date);\r\n        }}\r\n        // we can pass the required date format as a string\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        isClearable\r\n        showYearDropdown\r\n        scrollableMonthYearDropdown\r\n      />\r\n      {/* End Date */}\r\n      <label>End Date</label>\r\n      <Datepicker\r\n        placeholderText=\"End date\"\r\n        selected={selectedEndDate}\r\n        onChange={(date) => {\r\n          sortSelectedEndDate(date);\r\n        }}\r\n        // we can pass the required date format as a string\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        // using isClearable prop the selected date can be cleared\r\n        isClearable\r\n        showYearDropdown\r\n        scrollableMonthYearDropdown\r\n      />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filters: state.filters,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ExpenseListFilters);","//SET_TEXT_FILTER\r\nexport const setTextFilter = (text = \"\") => ({\r\n  type: \"SET_TEXT_FILTER\",\r\n  text,\r\n});\r\n// SORT_BY_DATE\r\nexport const sortByDate = () => ({\r\n  type: \"SORT_BY_DATE\",\r\n});\r\n// SORT_BY_AMOUNT\r\nexport const sortByAmount = () => ({\r\n  type: \"SORT_BY_AMOUNT\",\r\n});\r\n// SET_START_DATE\r\nexport const setStartDate = (startDate = undefined) => ({\r\n  type: \"SET_START_DATE\",\r\n  startDate,\r\n});\r\n// SET_END_DATE\r\nexport const setEndDate = (endDate = undefined) => ({\r\n  type: \"SET_END_DATE\",\r\n  endDate,\r\n});","import React from \"react\";\r\nimport ExpenseList from \"./ExpenseList\";\r\nimport ExpenseListFilters from \"./ExpenseListFilters\";\r\nconst ExpenseDashboardPage = () => {\r\n  return (\r\n    <div>\r\n      <ExpenseListFilters />\r\n      <ExpenseList />\r\n    </div>\r\n  );\r\n};\r\nexport default ExpenseDashboardPage;\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\n// import { SingleDatePicker } from 'react-dates';\r\n// import 'react-dates/initialize';\r\n// import 'react-dates/lib/css/_datepicker.css';\r\n\r\nimport Datepicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  //for edit form - form values have to be preloaded\r\n  //so we check if the passed prop singleExpense exists, if the prop exists the data is an existing data because data is passed from as a prop\r\n  //\r\n  let [description, setDescription] = useState(\r\n    props.singleExpense ? props.singleExpense.description : \"\"\r\n  );\r\n  let [note, setNote] = useState(\r\n    props.singleExpense ? props.singleExpense.note : \"\"\r\n  );\r\n  let [amount, setAmount] = useState(\r\n    props.singleExpense ? props.singleExpense.amount : \"\"\r\n  );\r\n  let [errorMsg, setErrorMsg] = useState(\"\");\r\n  // console.log(props.singleExpense.createdAt)\r\n  //const getDateFromTimestampTest=moment(props.singleExpense.createdAt).format(\"DD MMM YYYY hh:mm a\")\r\n  const getDateFromTimestamp = () => {\r\n    let createdAtDate;\r\n    if (props.singleExpense) {\r\n      createdAtDate = props.singleExpense.createdAt;\r\n      // console.log(\"converted time\",moment(createdAtDate).format('L'))\r\n      return createdAtDate;\r\n    } else {\r\n      createdAtDate = Date.now();\r\n      // console.log(\"converted time\",moment(createdAtDate).format('L'))\r\n      return createdAtDate;\r\n    }\r\n  };\r\n  // console.log(\"getDateFromTimestamp\",getDateFromTimestamp())\r\n  const [selectedDate, setSelectedDate] = useState(\r\n    props.singleExpense ? getDateFromTimestamp() : Date.now()\r\n  );\r\n  const now = moment();\r\n  // console.log(now.format(\"MMM Do YYYY\"));\r\n  const onDescriptionChange = (e) => {\r\n    //we have to use the description variable and set the value or use e.persist()\r\n    //alternately we can set the onChange in the element itself like implemented in textArea\r\n    const description = e.target.value;\r\n    setDescription(description);\r\n  };\r\n  const onAmountChange = (e) => {\r\n    const amount = e.target.value;\r\n    if (!amount || amount.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {     \r\n      setAmount(amount);\r\n    }\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!description || !amount) {\r\n      setErrorMsg(\"Please provide description and amount\");\r\n      // console.log(\"clicked\");\r\n    } else {\r\n      setErrorMsg(\"\");\r\n      // Note:Make sure the submitted object matches the data mapped to the respective action (i.e) it has same name and position\r\n      props.onSubmit({\r\n        description: description,\r\n        note: note,\r\n        amount: parseFloat(amount, 10) * 100,\r\n        createdAt: moment(selectedDate).valueOf(), //date stored as timestamp\r\n      });\r\n      // console.log(\"submitted\");\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        {/* description */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          autoFocus\r\n          value={description}\r\n          onChange={onDescriptionChange}\r\n        />\r\n        {/* amount */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Amount\"\r\n          value={amount}\r\n          onChange={onAmountChange}\r\n        />\r\n        {/* date */}      \r\n        {/* onchange we get the date as a parameter and we set the date to state */}\r\n        <Datepicker\r\n          placeholderText=\"date\"\r\n          selected={selectedDate}\r\n          onChange={(date) => setSelectedDate(date)}         \r\n          dateFormat=\"dd/MM/yyyy\"         \r\n          isClearable        \r\n          showYearDropdown\r\n          scrollableMonthYearDropdown\r\n        />\r\n        {/* note */}\r\n        <textarea\r\n          placeholder=\"Add a note for your expense optional\"\r\n          onChange={(e) => {\r\n            setNote(e.target.value);\r\n          }}\r\n        ></textarea>\r\n        <br />\r\n        {/* displaying dynamically error message */}\r\n        {/* {errorMsg ? <p>{errorMsg}</p> : null} */}\r\n        {errorMsg && <p>{errorMsg}</p>}\r\n        <button>Add Expense</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default ExpenseForm;","import React from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { addExpense } from \"../actions/Expenses\";\r\nconst AddExpensePage = (props) => {\r\n  return (\r\n    <div>\r\n      <ExpenseForm\r\n        onSubmit={(expense) => {\r\n          console.log(expense);\r\n          props.dispatch(addExpense(expense));\r\n          // we can switch to other page using props.history.push\r\n          props.history.push(\"/\");\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n// we have no need for the state and so we dont use mapStateToProps\r\n// we can use the connect method and call props.dispatch()\r\nexport default connect()(AddExpensePage);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { editExpense } from \"../actions/Expenses\";\r\nconst EditExpensePage = (props) => {\r\n  console.log(\"props-edit-expense\", props.singleExpense);\r\n  console.log(\"props.singleExpense.id\", props.singleExpense.id);\r\n  const singleExpense = props.singleExpense;\r\n  return (\r\n    <div>\r\n      <ExpenseForm\r\n        singleExpense={singleExpense}\r\n        onSubmit={(expense) => {\r\n          console.log(\"expenseFromChild\", expense);\r\n          console.log(\"expense.description\", expense.description);\r\n          // dispatch action to edit the expense\r\n          props.dispatch(editExpense(props.singleExpense.id, expense));\r\n          props.history.push(\"/\");\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    singleExpense: state.expenses.find(\r\n      (expense) => expense.id === props.match.params.id\r\n    ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(EditExpensePage);","import React from 'react';\r\nconst HelpPage = () => {\r\n    return (\r\n        <div>This is the Help expense component</div>\r\n    )\r\n}\r\nexport default HelpPage;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <div>\r\n            404! This page is not found - <Link to=\"/\">Go Home</Link>\r\n        </div>\r\n    )\r\n}\r\nexport default NotFoundPage","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n  \r\n    const Header = () => {\r\n        return (\r\n            <header>\r\n            <h1>Expense Tracker</h1>\r\n            <NavLink activeClassName=\"is-active\" exact={true} to=\"/\">\r\n              Dashboard\r\n            </NavLink>\r\n            <NavLink activeClassName=\"is-active\" to=\"/create\">\r\n              Create Expenses\r\n            </NavLink>\r\n            <NavLink activeClassName=\"is-active\" to=\"/edit\">\r\n              Edit Expenses\r\n            </NavLink>\r\n            <NavLink activeClassName=\"is-active\" to=\"/help\">\r\n              Help\r\n            </NavLink>\r\n          </header>\r\n        )\r\n}\r\nexport default Header","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport ExpenseDashboardPage from \"../Components/ExpenseDashboardPage\";\r\nimport AddExpensePage from \"../Components/AddExpensePage\";\r\nimport EditExpensePage from \"../Components/EditExpensePage\";\r\nimport HelpPage from \"../Components/HelpPage\";\r\nimport NotFoundPage from \"../Components/NotFoundPage\";\r\nimport Header from \"../Components/Header\";\r\nconst AppRouter = () => {\r\n  const routes = (\r\n    <BrowserRouter>\r\n      {/* BrowserRouter must always have only one child */}\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={ExpenseDashboardPage} />\r\n          <Route path=\"/create\" component={AddExpensePage} />\r\n          <Route path=\"/edit/:id\" component={EditExpensePage} />\r\n          <Route path=\"/help\" component={HelpPage} />\r\n          {/* Switch goes through all the routes one at a time to find a matching url\r\n            for a NotFound component we must place the wildcard route at the bottom */}\r\n          <Route component={NotFoundPage} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n  return <div>{routes}</div>;\r\n};\r\nexport default AppRouter;","// Expenses Reducer\r\nconst expenseReducerDefaultState = [];\r\nconst expensesReducer = (state = expenseReducerDefaultState, action) => {\r\n  // console.log(action);\r\n  switch (action.type) {\r\n    case \"ADD_EXPENSE\":\r\n      console.log(\"ADD_EXPENSE called\");\r\n      // returning using array.concat\r\n      // return state.concat(action.expense);\r\n      // returning using spread\r\n      return [...state, action.expense];\r\n    case \"REMOVE_EXPENSE\":\r\n      return state.filter(({ id }) => {\r\n        return id !== action.id;\r\n      });\r\n    case \"EDIT_EXPENSE\":\r\n      console.log(\"EDIT_EXPENSE\", action.id, action.updates);\r\n      return state.map((expense) => {\r\n        if (expense.id === action.id) {\r\n          return { ...expense, ...action.updates };\r\n        } else {\r\n          return expense;\r\n        }\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default expensesReducer;","// Filters reducer\r\nconst filtersReducerDefaultState = {\r\n  text: \"\",\r\n  sortBy: \"date\", //date or amount\r\n  startDate: undefined,\r\n  endDate: undefined,\r\n};\r\nconst filtersReducer = (state = filtersReducerDefaultState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TEXT_FILTER\":\r\n      return {\r\n        ...state,\r\n        text: action.text,\r\n      };\r\n    case \"SORT_BY_DATE\":\r\n      return {\r\n        ...state,\r\n        sortBy: \"date\",\r\n      };\r\n    case \"SORT_BY_AMOUNT\":\r\n      return {\r\n        ...state,\r\n        sortBy: \"amount\",\r\n      };\r\n    case \"SET_START_DATE\":\r\n      return {\r\n        ...state,\r\n        startDate: action.startDate,\r\n      };\r\n    case \"SET_END_DATE\":\r\n      return {\r\n        ...state,\r\n        endDate: action.endDate,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default filtersReducer;","import React from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"./routers/AppRouter\";\n// import Destructuring from './playground/Destructuring';\n// import Redux101 from './playground/Redux101';\n// import ReduxExpensify from './playground/ReduxExpensify';\nimport ConfigureStore from \"./store/ConfigureStore\";\nimport getVisibleExpenses from \"./selectors/Expenses\";\nimport { addExpense } from \"./actions/Expenses\";\nimport { setTextFilter } from \"./actions/Filters\";\nimport { Provider } from \"react-redux\";\n\nconst store = ConfigureStore();\n// add expense - water bill\nstore.dispatch(addExpense({ description: \"Water Bill\", amount: 4500 }));\n// add expense - gas bill\nstore.dispatch(addExpense({ description: \"Gas Bill\",createdAt:1000 }));\n// add expense - rent bill\nstore.dispatch(addExpense({ description: \"Rent Bill\",amount:109500 }));\n//  setTextFilter - this filter will display with searched text\n// if bill is set 2 values will be displayed\n// if water is set only that text is displayed\nconst state = store.getState();\n// const visibleExpenses = getVisibleExpenses(state.expenses, state.filters);\n// console.log(\"visibleExpenses\",visibleExpenses);\n\n// console.log(store.getState())\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <AppRouter />\n      </Provider>\n    </div>\n  );\n}\nexport default App;","import { createStore, combineReducers } from \"redux\";\r\nimport expensesReducer from \"../reducers/Expenses\";\r\nimport filtersReducer from \"../reducers/Filters\";\r\n// Store Creation\r\nexport default () => {\r\n  const store = createStore(\r\n    combineReducers({\r\n      expenses: expensesReducer,\r\n      filters: filtersReducer,\r\n    }),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  );\r\n  return store;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}